openapi: 3.1.0

info:
  version: 0.0.1
  title: Brevity API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  x-logo:
    url: "https://redocly.github.io/openapi-template/logo.png"
    altText: OpenAPI example logo

tags:
  - name: auth
  - name: article

servers:
  - url: http://127.0.0.1:8080

paths:
  /v1/auth/sign-up:
    post:
      security: []
      description: Create a new user account.
      operationId: signUp
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                  description: "Username must be globally unique."
                password:
                  type: string
              required:
                - email
                - username
                - password
      responses:
        "200":
          description: "Successfully registered."
        "400":
          description: "Invalid fields in request body."

  /v1/auth/sign-in:
    post:
      security: []
      operationId: signIn
      description: Log in to the system. An HttpOnly cookie will be set on the client with the access token.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrUsername:
                  type: string
                password:
                  type: string
              required:
                - emailOrUsername
                - password
      responses:
        "200":
          description: "Successfully logged in."
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  username:
                    type: string
                  email:
                    type: string
                    format: email
                required:
                  - id
                  - username
                  - email
        "400":
          description: "Invalid credentials."

  /v1/article-previews:
    get:
      security: []
      summary: Get article previews sorted by creation time.
      description: Get article previews
      operationId: getArticlePreviews
      tags:
        - article
      parameters:
        - name: pageToken
          in: query
          schema:
            type: string
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: orderBy
          in: query
          schema:
            type: string
            enum:
              - newest
            default: newest
      responses:
        "200":
          description: "Successfully retrieved article previews."
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/ArticlePreview"
                  nextPageToken:
                    type: string
                    description: "The token to fetch the next page of results. If there are no more results, this field will not be present."
                required:
                  - items
        "400":
          description: "Invalid request."

  /v1/articles/{slug}:
    get:
      security: []
      summary: Get an article by slug.
      description: Get an article by slug.
      operationId: getArticleBySlug
      tags:
        - article
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
            example: "my-article-3821"
      responses:
        "200":
          description: "Successfully retrieved the article."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
        "404":
          description: "Article not found."

  /v1/llm-api-keys:
    post:
      security:
        - bearerAuth: []
      operationId: createLLMAPIKey
      description: Register a new API key for the current user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "An easy-to-remember name for the API key."
                value:
                  type: string
                  description: "The API key string."
              required:
                - name
                - value
      responses:
        "200":
          description: "Successfully created the LLM API key."
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  value:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
    get:
      security:
        - bearerAuth: []
      description: Get all API keys registered by the current user.
      operationId: getLLMAPIKeys
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        valueFirstTen:
                          type: string
                          description: "The first 10 characters of the API key."
                        valueLastSix:
                          type: string
                          description: "The last 6 characters of the API key."
                        createdAt:
                          type: string
                          format: date-time

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ArticlePreview:
      type: object
      properties:
        id:
          type: string
          format: uuid
        slug:
          type: string
          example: "my-article-3821"
        title:
          type: string
          example: "My Article Title"
        description:
          type: string
          example: "This is a description of my article."
        author:
          type: object
          properties:
            id:
              type: string
              format: uuid
            displayName:
              type: string
            username:
              type: string
            avatarURL:
              type: string
          required:
            - id
            - username
        createdAt:
          type: string
          format: date-time
          example: "2021-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2021-01-05T00:00:00Z"
      required:
        - id
        - slug
        - title
        - authorID
        - authorDisplayName
        - createdAt
        - updatedAt

    Article:
      type: object
      properties:
        id:
          type: string
          format: uuid
        slug:
          type: string
          example: "my-article-3821"
        title:
          type: string
          example: "My Article Title"
        content:
          type: string
          description: "The HTML content of the article."
        author:
          type: object
          properties:
            id:
              type: string
              format: uuid
            displayName:
              type: string
            username:
              type: string
            avatarURL:
              type: string
          required:
            - id
            - username
        createdAt:
          type: string
          format: date-time
          example: "2021-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2021-01-05T00:00:00Z"
      required:
        - id
        - slug
        - title
        - content
        - author
        - createdAt
        - updatedAt
