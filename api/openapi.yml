openapi: 3.1.0

info:
  version: 0.0.1
  title: Brevity API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  x-logo:
    url: "https://redocly.github.io/openapi-template/logo.png"
    altText: OpenAPI example logo

tags:
  - name: auth
  - name: article

servers:
  - url: http://127.0.0.1:8080

paths:
  /v1/auth/register:
    post:
      security: []
      summary: Register a new user
      description: Register a new user
      operationId: register
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                password:
                  type: string
              required:
                - email
                - username
                - password
      responses:
        "200":
          description: "Successfully registered."
        "400":
          description: "Invalid fields in request body."
  /v1/auth/login:
    post:
      security: []
      summary: Login to the system
      description: Login to the system
      operationId: login
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrUsername:
                  type: string
                password:
                  type: string
                sample:
                  type: number
              required:
                - emailOrUsername
                - password
                - sample
      responses:
        "200":
          description: "Successfully logged in."
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  username:
                    type: string
                  email:
                    type: string
                    format: email
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  refreshToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                required:
                  - id
                  - username
                  - email
                  - accessToken
                  - refreshToken
        "400":
          description: "Invalid credentials."
  /v1/article-previews:
    get:
      security: []
      summary: Get article previews sorted by creation time.
      description: Get article previews
      operationId: getArticlePreviews
      tags:
        - article
      parameters:
        - name: pageToken
          in: query
          schema:
            type: string
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        "200":
          description: "Successfully retrieved article previews."
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/ArticlePreview"
                  nextPageToken:
                    type: string
                    description: "The token to fetch the next page of results."
                required:
                  - items
        "400":
          description: "Invalid request."

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ArticlePreview:
      type: object
      properties:
        id:
          type: string
          format: uuid
        slug:
          type: string
          example: "my-article-3821"
        title:
          type: string
          example: "My Article Title"
        description:
          type: string
          example: "This is a description of my article."
        authorID:
          type: string
          format: uuid
        authorDisplayName:
          type: string
          description: The display name of the author if it is set, otherwise the username.
          example: "John Doe"
        createdAt:
          type: string
          format: datetime
          example: "2021-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: datetime
          example: "2021-01-05T00:00:00Z"
      required:
        - id
        - slug
        - title
        - authorID
        - authorDisplayName
        - createdAt
        - updatedAt
