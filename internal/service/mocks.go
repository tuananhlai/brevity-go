// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	"github.com/tuananhlai/brevity-go/internal/model"
	"github.com/tuananhlai/brevity-go/internal/repository"
)

// NewMockArticleService creates a new instance of MockArticleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArticleService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArticleService {
	mock := &MockArticleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockArticleService is an autogenerated mock type for the ArticleService type
type MockArticleService struct {
	mock.Mock
}

type MockArticleService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArticleService) EXPECT() *MockArticleService_Expecter {
	return &MockArticleService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockArticleService
func (_mock *MockArticleService) Create(ctx context.Context, article *model.Article) error {
	ret := _mock.Called(ctx, article)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Article) error); ok {
		r0 = returnFunc(ctx, article)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockArticleService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockArticleService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - article *model.Article
func (_e *MockArticleService_Expecter) Create(ctx interface{}, article interface{}) *MockArticleService_Create_Call {
	return &MockArticleService_Create_Call{Call: _e.mock.On("Create", ctx, article)}
}

func (_c *MockArticleService_Create_Call) Run(run func(ctx context.Context, article *model.Article)) *MockArticleService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Article
		if args[1] != nil {
			arg1 = args[1].(*model.Article)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockArticleService_Create_Call) Return(err error) *MockArticleService_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockArticleService_Create_Call) RunAndReturn(run func(ctx context.Context, article *model.Article) error) *MockArticleService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySlug provides a mock function for the type MockArticleService
func (_mock *MockArticleService) GetBySlug(ctx context.Context, slug string) (*model.ArticleDetails, error) {
	ret := _mock.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetBySlug")
	}

	var r0 *model.ArticleDetails
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.ArticleDetails, error)); ok {
		return returnFunc(ctx, slug)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.ArticleDetails); ok {
		r0 = returnFunc(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ArticleDetails)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockArticleService_GetBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySlug'
type MockArticleService_GetBySlug_Call struct {
	*mock.Call
}

// GetBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *MockArticleService_Expecter) GetBySlug(ctx interface{}, slug interface{}) *MockArticleService_GetBySlug_Call {
	return &MockArticleService_GetBySlug_Call{Call: _e.mock.On("GetBySlug", ctx, slug)}
}

func (_c *MockArticleService_GetBySlug_Call) Run(run func(ctx context.Context, slug string)) *MockArticleService_GetBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockArticleService_GetBySlug_Call) Return(articleDetails *model.ArticleDetails, err error) *MockArticleService_GetBySlug_Call {
	_c.Call.Return(articleDetails, err)
	return _c
}

func (_c *MockArticleService_GetBySlug_Call) RunAndReturn(run func(ctx context.Context, slug string) (*model.ArticleDetails, error)) *MockArticleService_GetBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// ListPreviews provides a mock function for the type MockArticleService
func (_mock *MockArticleService) ListPreviews(ctx context.Context, pageSize int, opts ...repository.ListPreviewsOption) ([]model.ArticlePreview, string, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, pageSize, opts)
	} else {
		tmpRet = _mock.Called(ctx, pageSize)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListPreviews")
	}

	var r0 []model.ArticlePreview
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, ...repository.ListPreviewsOption) ([]model.ArticlePreview, string, error)); ok {
		return returnFunc(ctx, pageSize, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, ...repository.ListPreviewsOption) []model.ArticlePreview); ok {
		r0 = returnFunc(ctx, pageSize, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ArticlePreview)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, ...repository.ListPreviewsOption) string); ok {
		r1 = returnFunc(ctx, pageSize, opts...)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, ...repository.ListPreviewsOption) error); ok {
		r2 = returnFunc(ctx, pageSize, opts...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockArticleService_ListPreviews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPreviews'
type MockArticleService_ListPreviews_Call struct {
	*mock.Call
}

// ListPreviews is a helper method to define mock.On call
//   - ctx context.Context
//   - pageSize int
//   - opts ...repository.ListPreviewsOption
func (_e *MockArticleService_Expecter) ListPreviews(ctx interface{}, pageSize interface{}, opts ...interface{}) *MockArticleService_ListPreviews_Call {
	return &MockArticleService_ListPreviews_Call{Call: _e.mock.On("ListPreviews",
		append([]interface{}{ctx, pageSize}, opts...)...)}
}

func (_c *MockArticleService_ListPreviews_Call) Run(run func(ctx context.Context, pageSize int, opts ...repository.ListPreviewsOption)) *MockArticleService_ListPreviews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 []repository.ListPreviewsOption
		var variadicArgs []repository.ListPreviewsOption
		if len(args) > 2 {
			variadicArgs = args[2].([]repository.ListPreviewsOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockArticleService_ListPreviews_Call) Return(articlePreviews []model.ArticlePreview, s string, err error) *MockArticleService_ListPreviews_Call {
	_c.Call.Return(articlePreviews, s, err)
	return _c
}

func (_c *MockArticleService_ListPreviews_Call) RunAndReturn(run func(ctx context.Context, pageSize int, opts ...repository.ListPreviewsOption) ([]model.ArticlePreview, string, error)) *MockArticleService_ListPreviews_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Login(ctx context.Context, emailOrUsername string, password string) (*LoginReturn, error) {
	ret := _mock.Called(ctx, emailOrUsername, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *LoginReturn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*LoginReturn, error)); ok {
		return returnFunc(ctx, emailOrUsername, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *LoginReturn); ok {
		r0 = returnFunc(ctx, emailOrUsername, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoginReturn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, emailOrUsername, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - emailOrUsername string
//   - password string
func (_e *MockAuthService_Expecter) Login(ctx interface{}, emailOrUsername interface{}, password interface{}) *MockAuthService_Login_Call {
	return &MockAuthService_Login_Call{Call: _e.mock.On("Login", ctx, emailOrUsername, password)}
}

func (_c *MockAuthService_Login_Call) Run(run func(ctx context.Context, emailOrUsername string, password string)) *MockAuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAuthService_Login_Call) Return(loginReturn *LoginReturn, err error) *MockAuthService_Login_Call {
	_c.Call.Return(loginReturn, err)
	return _c
}

func (_c *MockAuthService_Login_Call) RunAndReturn(run func(ctx context.Context, emailOrUsername string, password string) (*LoginReturn, error)) *MockAuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Register(ctx context.Context, email string, username string, password string) error {
	ret := _mock.Called(ctx, email, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, email, username, password)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockAuthService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - username string
//   - password string
func (_e *MockAuthService_Expecter) Register(ctx interface{}, email interface{}, username interface{}, password interface{}) *MockAuthService_Register_Call {
	return &MockAuthService_Register_Call{Call: _e.mock.On("Register", ctx, email, username, password)}
}

func (_c *MockAuthService_Register_Call) Run(run func(ctx context.Context, email string, username string, password string)) *MockAuthService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockAuthService_Register_Call) Return(err error) *MockAuthService_Register_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthService_Register_Call) RunAndReturn(run func(ctx context.Context, email string, username string, password string) error) *MockAuthService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEncryptionService creates a new instance of MockEncryptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncryptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncryptionService {
	mock := &MockEncryptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEncryptionService is an autogenerated mock type for the EncryptionService type
type MockEncryptionService struct {
	mock.Mock
}

type MockEncryptionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncryptionService) EXPECT() *MockEncryptionService_Expecter {
	return &MockEncryptionService_Expecter{mock: &_m.Mock}
}

// Decrypt provides a mock function for the type MockEncryptionService
func (_mock *MockEncryptionService) Decrypt(cipherText []byte) ([]byte, error) {
	ret := _mock.Called(cipherText)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return returnFunc(cipherText)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = returnFunc(cipherText)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(cipherText)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEncryptionService_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type MockEncryptionService_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - cipherText []byte
func (_e *MockEncryptionService_Expecter) Decrypt(cipherText interface{}) *MockEncryptionService_Decrypt_Call {
	return &MockEncryptionService_Decrypt_Call{Call: _e.mock.On("Decrypt", cipherText)}
}

func (_c *MockEncryptionService_Decrypt_Call) Run(run func(cipherText []byte)) *MockEncryptionService_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEncryptionService_Decrypt_Call) Return(bytes []byte, err error) *MockEncryptionService_Decrypt_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockEncryptionService_Decrypt_Call) RunAndReturn(run func(cipherText []byte) ([]byte, error)) *MockEncryptionService_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function for the type MockEncryptionService
func (_mock *MockEncryptionService) Encrypt(plainText []byte) []byte {
	ret := _mock.Called(plainText)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 []byte
	if returnFunc, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = returnFunc(plainText)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	return r0
}

// MockEncryptionService_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type MockEncryptionService_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - plainText []byte
func (_e *MockEncryptionService_Expecter) Encrypt(plainText interface{}) *MockEncryptionService_Encrypt_Call {
	return &MockEncryptionService_Encrypt_Call{Call: _e.mock.On("Encrypt", plainText)}
}

func (_c *MockEncryptionService_Encrypt_Call) Run(run func(plainText []byte)) *MockEncryptionService_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEncryptionService_Encrypt_Call) Return(bytes []byte) *MockEncryptionService_Encrypt_Call {
	_c.Call.Return(bytes)
	return _c
}

func (_c *MockEncryptionService_Encrypt_Call) RunAndReturn(run func(plainText []byte) []byte) *MockEncryptionService_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLLMAPIKeyService creates a new instance of MockLLMAPIKeyService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLLMAPIKeyService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLLMAPIKeyService {
	mock := &MockLLMAPIKeyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLLMAPIKeyService is an autogenerated mock type for the LLMAPIKeyService type
type MockLLMAPIKeyService struct {
	mock.Mock
}

type MockLLMAPIKeyService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLLMAPIKeyService) EXPECT() *MockLLMAPIKeyService_Expecter {
	return &MockLLMAPIKeyService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockLLMAPIKeyService
func (_mock *MockLLMAPIKeyService) Create(ctx context.Context, apiKey LLMAPIKeyCreateParams) (*LLMAPIKey, error) {
	ret := _mock.Called(ctx, apiKey)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *LLMAPIKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, LLMAPIKeyCreateParams) (*LLMAPIKey, error)); ok {
		return returnFunc(ctx, apiKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, LLMAPIKeyCreateParams) *LLMAPIKey); ok {
		r0 = returnFunc(ctx, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LLMAPIKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, LLMAPIKeyCreateParams) error); ok {
		r1 = returnFunc(ctx, apiKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLLMAPIKeyService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLLMAPIKeyService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - apiKey LLMAPIKeyCreateParams
func (_e *MockLLMAPIKeyService_Expecter) Create(ctx interface{}, apiKey interface{}) *MockLLMAPIKeyService_Create_Call {
	return &MockLLMAPIKeyService_Create_Call{Call: _e.mock.On("Create", ctx, apiKey)}
}

func (_c *MockLLMAPIKeyService_Create_Call) Run(run func(ctx context.Context, apiKey LLMAPIKeyCreateParams)) *MockLLMAPIKeyService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 LLMAPIKeyCreateParams
		if args[1] != nil {
			arg1 = args[1].(LLMAPIKeyCreateParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLLMAPIKeyService_Create_Call) Return(lLMAPIKey *LLMAPIKey, err error) *MockLLMAPIKeyService_Create_Call {
	_c.Call.Return(lLMAPIKey, err)
	return _c
}

func (_c *MockLLMAPIKeyService_Create_Call) RunAndReturn(run func(ctx context.Context, apiKey LLMAPIKeyCreateParams) (*LLMAPIKey, error)) *MockLLMAPIKeyService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUserID provides a mock function for the type MockLLMAPIKeyService
func (_mock *MockLLMAPIKeyService) ListByUserID(ctx context.Context, userID uuid.UUID) ([]*LLMAPIKey, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListByUserID")
	}

	var r0 []*LLMAPIKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*LLMAPIKey, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*LLMAPIKey); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*LLMAPIKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLLMAPIKeyService_ListByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUserID'
type MockLLMAPIKeyService_ListByUserID_Call struct {
	*mock.Call
}

// ListByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockLLMAPIKeyService_Expecter) ListByUserID(ctx interface{}, userID interface{}) *MockLLMAPIKeyService_ListByUserID_Call {
	return &MockLLMAPIKeyService_ListByUserID_Call{Call: _e.mock.On("ListByUserID", ctx, userID)}
}

func (_c *MockLLMAPIKeyService_ListByUserID_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockLLMAPIKeyService_ListByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLLMAPIKeyService_ListByUserID_Call) Return(lLMAPIKeys []*LLMAPIKey, err error) *MockLLMAPIKeyService_ListByUserID_Call {
	_c.Call.Return(lLMAPIKeys, err)
	return _c
}

func (_c *MockLLMAPIKeyService_ListByUserID_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) ([]*LLMAPIKey, error)) *MockLLMAPIKeyService_ListByUserID_Call {
	_c.Call.Return(run)
	return _c
}
