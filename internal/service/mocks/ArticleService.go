// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/tuananhlai/brevity-go/internal/model"

	repository "github.com/tuananhlai/brevity-go/internal/repository"
)

// ArticleService is an autogenerated mock type for the ArticleService type
type ArticleService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, article
func (_m *ArticleService) Create(ctx context.Context, article *model.Article) error {
	ret := _m.Called(ctx, article)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Article) error); ok {
		r0 = rf(ctx, article)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListPreviews provides a mock function with given fields: ctx, pageSize, opts
func (_m *ArticleService) ListPreviews(ctx context.Context, pageSize int, opts ...repository.ListPreviewsOption) ([]model.ArticlePreview, string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pageSize)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPreviews")
	}

	var r0 []model.ArticlePreview
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, ...repository.ListPreviewsOption) ([]model.ArticlePreview, string, error)); ok {
		return rf(ctx, pageSize, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, ...repository.ListPreviewsOption) []model.ArticlePreview); ok {
		r0 = rf(ctx, pageSize, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ArticlePreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, ...repository.ListPreviewsOption) string); ok {
		r1 = rf(ctx, pageSize, opts...)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, ...repository.ListPreviewsOption) error); ok {
		r2 = rf(ctx, pageSize, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewArticleService creates a new instance of ArticleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArticleService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArticleService {
	mock := &ArticleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
