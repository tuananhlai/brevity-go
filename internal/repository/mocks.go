// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/tuananhlai/brevity-go/internal/model"
)

// NewMockArticleRepository creates a new instance of MockArticleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArticleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArticleRepository {
	mock := &MockArticleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockArticleRepository is an autogenerated mock type for the ArticleRepository type
type MockArticleRepository struct {
	mock.Mock
}

type MockArticleRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArticleRepository) EXPECT() *MockArticleRepository_Expecter {
	return &MockArticleRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockArticleRepository
func (_mock *MockArticleRepository) Create(ctx context.Context, article *model.Article) error {
	ret := _mock.Called(ctx, article)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Article) error); ok {
		r0 = returnFunc(ctx, article)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockArticleRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockArticleRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - article *model.Article
func (_e *MockArticleRepository_Expecter) Create(ctx interface{}, article interface{}) *MockArticleRepository_Create_Call {
	return &MockArticleRepository_Create_Call{Call: _e.mock.On("Create", ctx, article)}
}

func (_c *MockArticleRepository_Create_Call) Run(run func(ctx context.Context, article *model.Article)) *MockArticleRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Article
		if args[1] != nil {
			arg1 = args[1].(*model.Article)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockArticleRepository_Create_Call) Return(err error) *MockArticleRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockArticleRepository_Create_Call) RunAndReturn(run func(ctx context.Context, article *model.Article) error) *MockArticleRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySlug provides a mock function for the type MockArticleRepository
func (_mock *MockArticleRepository) GetBySlug(ctx context.Context, slug string) (*model.ArticleDetails, error) {
	ret := _mock.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetBySlug")
	}

	var r0 *model.ArticleDetails
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.ArticleDetails, error)); ok {
		return returnFunc(ctx, slug)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.ArticleDetails); ok {
		r0 = returnFunc(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ArticleDetails)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockArticleRepository_GetBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySlug'
type MockArticleRepository_GetBySlug_Call struct {
	*mock.Call
}

// GetBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *MockArticleRepository_Expecter) GetBySlug(ctx interface{}, slug interface{}) *MockArticleRepository_GetBySlug_Call {
	return &MockArticleRepository_GetBySlug_Call{Call: _e.mock.On("GetBySlug", ctx, slug)}
}

func (_c *MockArticleRepository_GetBySlug_Call) Run(run func(ctx context.Context, slug string)) *MockArticleRepository_GetBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockArticleRepository_GetBySlug_Call) Return(articleDetails *model.ArticleDetails, err error) *MockArticleRepository_GetBySlug_Call {
	_c.Call.Return(articleDetails, err)
	return _c
}

func (_c *MockArticleRepository_GetBySlug_Call) RunAndReturn(run func(ctx context.Context, slug string) (*model.ArticleDetails, error)) *MockArticleRepository_GetBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// ListPreviews provides a mock function for the type MockArticleRepository
func (_mock *MockArticleRepository) ListPreviews(ctx context.Context, pageSize int, opts ...ListPreviewsOption) ([]model.ArticlePreview, string, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, pageSize, opts)
	} else {
		tmpRet = _mock.Called(ctx, pageSize)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListPreviews")
	}

	var r0 []model.ArticlePreview
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, ...ListPreviewsOption) ([]model.ArticlePreview, string, error)); ok {
		return returnFunc(ctx, pageSize, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, ...ListPreviewsOption) []model.ArticlePreview); ok {
		r0 = returnFunc(ctx, pageSize, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ArticlePreview)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, ...ListPreviewsOption) string); ok {
		r1 = returnFunc(ctx, pageSize, opts...)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, ...ListPreviewsOption) error); ok {
		r2 = returnFunc(ctx, pageSize, opts...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockArticleRepository_ListPreviews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPreviews'
type MockArticleRepository_ListPreviews_Call struct {
	*mock.Call
}

// ListPreviews is a helper method to define mock.On call
//   - ctx context.Context
//   - pageSize int
//   - opts ...ListPreviewsOption
func (_e *MockArticleRepository_Expecter) ListPreviews(ctx interface{}, pageSize interface{}, opts ...interface{}) *MockArticleRepository_ListPreviews_Call {
	return &MockArticleRepository_ListPreviews_Call{Call: _e.mock.On("ListPreviews",
		append([]interface{}{ctx, pageSize}, opts...)...)}
}

func (_c *MockArticleRepository_ListPreviews_Call) Run(run func(ctx context.Context, pageSize int, opts ...ListPreviewsOption)) *MockArticleRepository_ListPreviews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 []ListPreviewsOption
		var variadicArgs []ListPreviewsOption
		if len(args) > 2 {
			variadicArgs = args[2].([]ListPreviewsOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockArticleRepository_ListPreviews_Call) Return(results []model.ArticlePreview, nextPageToken string, err error) *MockArticleRepository_ListPreviews_Call {
	_c.Call.Return(results, nextPageToken, err)
	return _c
}

func (_c *MockArticleRepository_ListPreviews_Call) RunAndReturn(run func(ctx context.Context, pageSize int, opts ...ListPreviewsOption) ([]model.ArticlePreview, string, error)) *MockArticleRepository_ListPreviews_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthRepository creates a new instance of MockAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepository {
	mock := &MockAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthRepository is an autogenerated mock type for the AuthRepository type
type MockAuthRepository struct {
	mock.Mock
}

type MockAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepository) EXPECT() *MockAuthRepository_Expecter {
	return &MockAuthRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) CreateUser(ctx context.Context, params CreateUserParams) (*model.AuthUser, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.AuthUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateUserParams) (*model.AuthUser, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateUserParams) *model.AuthUser); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateUserParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockAuthRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - params CreateUserParams
func (_e *MockAuthRepository_Expecter) CreateUser(ctx interface{}, params interface{}) *MockAuthRepository_CreateUser_Call {
	return &MockAuthRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, params)}
}

func (_c *MockAuthRepository_CreateUser_Call) Run(run func(ctx context.Context, params CreateUserParams)) *MockAuthRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 CreateUserParams
		if args[1] != nil {
			arg1 = args[1].(CreateUserParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepository_CreateUser_Call) Return(authUser *model.AuthUser, err error) *MockAuthRepository_CreateUser_Call {
	_c.Call.Return(authUser, err)
	return _c
}

func (_c *MockAuthRepository_CreateUser_Call) RunAndReturn(run func(ctx context.Context, params CreateUserParams) (*model.AuthUser, error)) *MockAuthRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) GetUser(ctx context.Context, emailOrUsername string) (*model.AuthUser, error) {
	ret := _mock.Called(ctx, emailOrUsername)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *model.AuthUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.AuthUser, error)); ok {
		return returnFunc(ctx, emailOrUsername)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.AuthUser); ok {
		r0 = returnFunc(ctx, emailOrUsername)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, emailOrUsername)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockAuthRepository_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - emailOrUsername string
func (_e *MockAuthRepository_Expecter) GetUser(ctx interface{}, emailOrUsername interface{}) *MockAuthRepository_GetUser_Call {
	return &MockAuthRepository_GetUser_Call{Call: _e.mock.On("GetUser", ctx, emailOrUsername)}
}

func (_c *MockAuthRepository_GetUser_Call) Run(run func(ctx context.Context, emailOrUsername string)) *MockAuthRepository_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepository_GetUser_Call) Return(authUser *model.AuthUser, err error) *MockAuthRepository_GetUser_Call {
	_c.Call.Return(authUser, err)
	return _c
}

func (_c *MockAuthRepository_GetUser_Call) RunAndReturn(run func(ctx context.Context, emailOrUsername string) (*model.AuthUser, error)) *MockAuthRepository_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) GetUserByID(ctx context.Context, userID string) (*model.AuthUser, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *model.AuthUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.AuthUser, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.AuthUser); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockAuthRepository_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockAuthRepository_Expecter) GetUserByID(ctx interface{}, userID interface{}) *MockAuthRepository_GetUserByID_Call {
	return &MockAuthRepository_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, userID)}
}

func (_c *MockAuthRepository_GetUserByID_Call) Run(run func(ctx context.Context, userID string)) *MockAuthRepository_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepository_GetUserByID_Call) Return(authUser *model.AuthUser, err error) *MockAuthRepository_GetUserByID_Call {
	_c.Call.Return(authUser, err)
	return _c
}

func (_c *MockAuthRepository_GetUserByID_Call) RunAndReturn(run func(ctx context.Context, userID string) (*model.AuthUser, error)) *MockAuthRepository_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLLMAPIKeyRepository creates a new instance of MockLLMAPIKeyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLLMAPIKeyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLLMAPIKeyRepository {
	mock := &MockLLMAPIKeyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLLMAPIKeyRepository is an autogenerated mock type for the LLMAPIKeyRepository type
type MockLLMAPIKeyRepository struct {
	mock.Mock
}

type MockLLMAPIKeyRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLLMAPIKeyRepository) EXPECT() *MockLLMAPIKeyRepository_Expecter {
	return &MockLLMAPIKeyRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockLLMAPIKeyRepository
func (_mock *MockLLMAPIKeyRepository) Create(ctx context.Context, apiKey LLMAPIKeyCreateParams) (*model.LLMAPIKey, error) {
	ret := _mock.Called(ctx, apiKey)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.LLMAPIKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, LLMAPIKeyCreateParams) (*model.LLMAPIKey, error)); ok {
		return returnFunc(ctx, apiKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, LLMAPIKeyCreateParams) *model.LLMAPIKey); ok {
		r0 = returnFunc(ctx, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LLMAPIKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, LLMAPIKeyCreateParams) error); ok {
		r1 = returnFunc(ctx, apiKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLLMAPIKeyRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLLMAPIKeyRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - apiKey LLMAPIKeyCreateParams
func (_e *MockLLMAPIKeyRepository_Expecter) Create(ctx interface{}, apiKey interface{}) *MockLLMAPIKeyRepository_Create_Call {
	return &MockLLMAPIKeyRepository_Create_Call{Call: _e.mock.On("Create", ctx, apiKey)}
}

func (_c *MockLLMAPIKeyRepository_Create_Call) Run(run func(ctx context.Context, apiKey LLMAPIKeyCreateParams)) *MockLLMAPIKeyRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 LLMAPIKeyCreateParams
		if args[1] != nil {
			arg1 = args[1].(LLMAPIKeyCreateParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLLMAPIKeyRepository_Create_Call) Return(lLMAPIKey *model.LLMAPIKey, err error) *MockLLMAPIKeyRepository_Create_Call {
	_c.Call.Return(lLMAPIKey, err)
	return _c
}

func (_c *MockLLMAPIKeyRepository_Create_Call) RunAndReturn(run func(ctx context.Context, apiKey LLMAPIKeyCreateParams) (*model.LLMAPIKey, error)) *MockLLMAPIKeyRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUserID provides a mock function for the type MockLLMAPIKeyRepository
func (_mock *MockLLMAPIKeyRepository) ListByUserID(ctx context.Context, userID string) ([]*model.LLMAPIKey, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListByUserID")
	}

	var r0 []*model.LLMAPIKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*model.LLMAPIKey, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*model.LLMAPIKey); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.LLMAPIKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLLMAPIKeyRepository_ListByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUserID'
type MockLLMAPIKeyRepository_ListByUserID_Call struct {
	*mock.Call
}

// ListByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockLLMAPIKeyRepository_Expecter) ListByUserID(ctx interface{}, userID interface{}) *MockLLMAPIKeyRepository_ListByUserID_Call {
	return &MockLLMAPIKeyRepository_ListByUserID_Call{Call: _e.mock.On("ListByUserID", ctx, userID)}
}

func (_c *MockLLMAPIKeyRepository_ListByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockLLMAPIKeyRepository_ListByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLLMAPIKeyRepository_ListByUserID_Call) Return(lLMAPIKeys []*model.LLMAPIKey, err error) *MockLLMAPIKeyRepository_ListByUserID_Call {
	_c.Call.Return(lLMAPIKeys, err)
	return _c
}

func (_c *MockLLMAPIKeyRepository_ListByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]*model.LLMAPIKey, error)) *MockLLMAPIKeyRepository_ListByUserID_Call {
	_c.Call.Return(run)
	return _c
}
