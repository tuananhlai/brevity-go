// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/tuananhlai/brevity-go/internal/model"

	repository "github.com/tuananhlai/brevity-go/internal/repository"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// CreateRefreshToken provides a mock function with given fields: ctx, params
func (_m *AuthRepository) CreateRefreshToken(ctx context.Context, params repository.CreateRefreshTokenParams) (*model.RefreshToken, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 *model.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateRefreshTokenParams) (*model.RefreshToken, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateRefreshTokenParams) *model.RefreshToken); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateRefreshTokenParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, params
func (_m *AuthRepository) CreateUser(ctx context.Context, params repository.CreateUserParams) (*model.AuthUser, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.AuthUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateUserParams) (*model.AuthUser, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateUserParams) *model.AuthUser); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateUserParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefreshToken provides a mock function with given fields: ctx, token
func (_m *AuthRepository) GetRefreshToken(ctx context.Context, token string) (*model.RefreshToken, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshToken")
	}

	var r0 *model.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.RefreshToken, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.RefreshToken); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, emailOrUsername
func (_m *AuthRepository) GetUser(ctx context.Context, emailOrUsername string) (*model.AuthUser, error) {
	ret := _m.Called(ctx, emailOrUsername)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *model.AuthUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.AuthUser, error)); ok {
		return rf(ctx, emailOrUsername)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AuthUser); ok {
		r0 = rf(ctx, emailOrUsername)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, emailOrUsername)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
